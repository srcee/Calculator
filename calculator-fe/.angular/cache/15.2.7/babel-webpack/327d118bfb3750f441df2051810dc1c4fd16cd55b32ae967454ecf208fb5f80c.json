{"ast":null,"code":"import { select } from '@ngrx/store';\nimport { take } from 'rxjs/operators';\nimport { KeypadNumber, KeypadOperator } from './components/keypad/keypad.enum';\nimport { calculatorEquationSelector } from './state/calculator.selectors';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/calculatorEquation.service\";\nimport * as i2 from \"./services/calculator-api.service\";\nimport * as i3 from \"@ngrx/store\";\nimport * as i4 from \"@angular/common\";\nimport * as i5 from \"./components/display-panel/display-panel.component\";\nimport * as i6 from \"./components/keypad/keypad.component\";\nexport class CalculatorComponent {\n  constructor(calculatorEquationService, calculatorApi, store) {\n    this.calculatorEquationService = calculatorEquationService;\n    this.calculatorApi = calculatorApi;\n    this.store = store;\n  }\n  ngOnInit() {\n    this.equation$ = this.store.pipe(select(calculatorEquationSelector));\n  }\n  ngOnDestroy() {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n  onEnterKeydownEvent() {\n    const updateEquationPayload = {\n      value: KeypadOperator.Equals,\n      isOperator: true\n    };\n    // TODO: It's wrong doing it this way. Use Effects.\n    let equationBeforeUpdate;\n    this.equation$.pipe(take(1) // take only one emitted value and then complete the observable.\n    ).subscribe(value => {\n      equationBeforeUpdate = value;\n    });\n    // Update the equation and get the value of `this.equation$` after it is updated\n    this.calculatorEquationService.updateEquation(updateEquationPayload);\n    let equationAfterUpdate;\n    this.equation$.pipe(take(1) // take only one emitted value and then complete the observable.\n    ).subscribe(value => {\n      equationAfterUpdate = value;\n      // Create the calculation payload with the `equationBeforeUpdate` and `equationAfterUpdate` values.\n      const createCalculationPayload = {\n        equation: equationBeforeUpdate,\n        result: equationAfterUpdate\n      };\n      // Call the API to create the calculation\n      this.calculatorApi.createCalculation(createCalculationPayload).subscribe();\n    });\n  }\n  onKeydownEvent(event) {\n    const value = event.key;\n    const isOperator = Object.values(KeypadOperator).includes(value);\n    const isNumber = Object.values(KeypadNumber).includes(value);\n    if (isOperator || isNumber) {\n      const payload = {\n        value,\n        isOperator\n      };\n      this.calculatorEquationService.updateEquation(payload);\n    }\n  }\n}\nCalculatorComponent.ɵfac = function CalculatorComponent_Factory(t) {\n  return new (t || CalculatorComponent)(i0.ɵɵdirectiveInject(i1.CalculatorEquationService), i0.ɵɵdirectiveInject(i2.CalculatorApi), i0.ɵɵdirectiveInject(i3.Store));\n};\nCalculatorComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: CalculatorComponent,\n  selectors: [[\"app-calculator\"]],\n  hostBindings: function CalculatorComponent_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"keydown.enter\", function CalculatorComponent_keydown_enter_HostBindingHandler($event) {\n        return ctx.onEnterKeydownEvent($event);\n      }, false, i0.ɵɵresolveWindow)(\"keydown\", function CalculatorComponent_keydown_HostBindingHandler($event) {\n        return ctx.onKeydownEvent($event);\n      }, false, i0.ɵɵresolveWindow);\n    }\n  },\n  decls: 3,\n  vars: 0,\n  consts: [[\"ngClass\", \"calculator\"]],\n  template: function CalculatorComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0);\n      i0.ɵɵelement(1, \"app-display-panel\")(2, \"app-keypad\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  dependencies: [i4.NgClass, i5.DisplayPanelComponent, i6.KeypadComponent],\n  styles: [\"[_ngcontent-%COMP%]:root {\\n  --light: #d8dbe0;\\n  --dark: #28292c;\\n  --link: rgb(27, 129, 112);\\n  --link-hover: rgb(24, 94, 82);\\n}\\n\\n.calculator[_ngcontent-%COMP%] {\\n  display: grid;\\n  grid-template-rows: 1fr 3fr;\\n  position: absolute;\\n  top: 50%;\\n  left: 50%;\\n  transform: translate(-50%, -50%);\\n  width: 400px;\\n  height: 500px;\\n  border: 2px solid #404d5e;\\n  border-radius: 5px;\\n}\\n@media (max-width: 600px) {\\n  .calculator[_ngcontent-%COMP%] {\\n    width: 100%;\\n    height: 100%;\\n  }\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3MiLCJ3ZWJwYWNrOi8vLi9zcmMvYXBwL2NhbGN1bGF0b3IvY2FsY3VsYXRvci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQkFBQTtBQVFBLGtCQUFBO0FBT0E7RUFDRSxnQkFBQTtFQUNBLGVBQUE7RUFDQSx5QkFBQTtFQUNBLDZCQUFBO0FDWkY7O0FBTEE7RUFDRSxhQUFBO0VBQ0EsMkJBQUE7RUFDQSxrQkFBQTtFQUNBLFFBQUE7RUFDQSxTQUFBO0VBQ0EsZ0NBQUE7RUFDQSxZQUFBO0VBQ0EsYUFBQTtFQUNBLHlCQUFBO0VBQ0Esa0JBQUE7QUFRRjtBQU5FO0VBWkY7SUFhSSxXQUFBO0lBQ0EsWUFBQTtFQVNGO0FBQ0YiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBSZXNwb25zaXZlIGJyZWFrcG9pbnQgKi9cclxuJHhzOiAwO1xyXG4kc206IDU3NnB4O1xyXG4kbWQ6IDc2OHB4O1xyXG4kbGc6IDk5MnB4O1xyXG4keGw6IDEyMDBweDtcclxuJHh4bDogMTkyMHB4O1xyXG5cclxuLyogQ29sb3IgUGFsZXR0ZSAqL1xyXG4kYmFja2dyb3VuZEFjY2VudENvbG9yOiAjNGM3MTYxO1xyXG4kYmFja2dyb3VuZFByaW1hcnlDb2xvcjogIzQwNGQ1ZTtcclxuJGJhY2tncm91bmRTZWNvbmRhcnlDb2xvcjogIzRjNWM3MTtcclxuJHR5cG9ncmFwaHlQcmltYXJ5Q29sb3I6IHdoaXRlO1xyXG4kdHlwb2dyYXBoeVNlY29uZGFyeUNvbG9yOiBncmF5O1xyXG5cclxuOnJvb3Qge1xyXG4gIC0tbGlnaHQ6ICNkOGRiZTA7XHJcbiAgLS1kYXJrOiAjMjgyOTJjO1xyXG4gIC0tbGluazogcmdiKDI3LCAxMjksIDExMik7XHJcbiAgLS1saW5rLWhvdmVyOiByZ2IoMjQsIDk0LCA4Mik7XHJcbn1cclxuIiwiQGltcG9ydCBcInNyYy9zdHlsZXMvdmFyaWFibGVzLnNjc3NcIjtcclxuXHJcbi5jYWxjdWxhdG9yIHtcclxuICBkaXNwbGF5OiBncmlkO1xyXG4gIGdyaWQtdGVtcGxhdGUtcm93czogMWZyIDNmcjtcclxuICBwb3NpdGlvbjogYWJzb2x1dGU7XHJcbiAgdG9wOiA1MCU7XHJcbiAgbGVmdDogNTAlO1xyXG4gIHRyYW5zZm9ybTogdHJhbnNsYXRlKC01MCUsIC01MCUpO1xyXG4gIHdpZHRoOiA0MDBweDtcclxuICBoZWlnaHQ6IDUwMHB4O1xyXG4gIGJvcmRlcjogMnB4IHNvbGlkICRiYWNrZ3JvdW5kUHJpbWFyeUNvbG9yO1xyXG4gIGJvcmRlci1yYWRpdXM6IDVweDtcclxuXHJcbiAgQG1lZGlhIChtYXgtd2lkdGg6IDYwMHB4KSB7XHJcbiAgICB3aWR0aDogMTAwJTtcclxuICAgIGhlaWdodDogMTAwJTtcclxuICB9XHJcbn1cclxuIl0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AACA,SAAgBA,MAAM,QAAQ,aAAa;AAC3C,SAAcC,IAAI,QAAQ,gBAAgB;AAG1C,SAASC,YAAY,EAAEC,cAAc,QAAQ,iCAAiC;AAI9E,SAASC,0BAA0B,QAAQ,8BAA8B;;;;;;;;AASzE,OAAM,MAAOC,mBAAmB;EAI9BC,YACUC,yBAAoD,EACpDC,aAA4B,EAC5BC,KAAsB;IAFtB,8BAAyB,GAAzBF,yBAAyB;IACzB,kBAAa,GAAbC,aAAa;IACb,UAAK,GAALC,KAAK;EACZ;EAEHC,QAAQ;IACN,IAAI,CAACC,SAAS,GAAG,IAAI,CAACF,KAAK,CAACG,IAAI,CAACZ,MAAM,CAACI,0BAA0B,CAAC,CAAC;EACtE;EAEAS,WAAW;IACT,IAAI,IAAI,CAACC,YAAY,EAAE;MACrB,IAAI,CAACA,YAAY,CAACC,WAAW,EAAE;;EAEnC;EAGAC,mBAAmB;IACjB,MAAMC,qBAAqB,GAA0B;MACnDC,KAAK,EAAEf,cAAc,CAACgB,MAAM;MAC5BC,UAAU,EAAE;KACb;IAED;IACA,IAAIC,oBAA4B;IAChC,IAAI,CAACV,SAAS,CACXC,IAAI,CACHX,IAAI,CAAC,CAAC,CAAC,CAAC;IAAA,CACT,CACAqB,SAAS,CAAEJ,KAAK,IAAI;MACnBG,oBAAoB,GAAGH,KAAK;IAC9B,CAAC,CAAC;IAEJ;IACA,IAAI,CAACX,yBAAyB,CAACgB,cAAc,CAACN,qBAAqB,CAAC;IACpE,IAAIO,mBAA2B;IAC/B,IAAI,CAACb,SAAS,CACXC,IAAI,CACHX,IAAI,CAAC,CAAC,CAAC,CAAC;IAAA,CACT,CACAqB,SAAS,CAAEJ,KAAK,IAAI;MACnBM,mBAAmB,GAAGN,KAAK;MAE3B;MACA,MAAMO,wBAAwB,GAAuB;QACnDC,QAAQ,EAAEL,oBAAoB;QAC9BM,MAAM,EAAEH;OACT;MAED;MACA,IAAI,CAAChB,aAAa,CACfoB,iBAAiB,CAACH,wBAAwB,CAAC,CAC3CH,SAAS,EAAE;IAChB,CAAC,CAAC;EACN;EAGAO,cAAc,CAACC,KAAoB;IACjC,MAAMZ,KAAK,GAAGY,KAAK,CAACC,GAAG;IACvB,MAAMX,UAAU,GAAGY,MAAM,CAACC,MAAM,CAAC9B,cAAc,CAAC,CAAC+B,QAAQ,CACvDhB,KAAkC,CACnC;IACD,MAAMiB,QAAQ,GAAGH,MAAM,CAACC,MAAM,CAAC/B,YAAY,CAAC,CAACgC,QAAQ,CACnDhB,KAAgC,CACjC;IACD,IAAIE,UAAU,IAAIe,QAAQ,EAAE;MAC1B,MAAMC,OAAO,GAA0B;QACrClB,KAAK;QACLE;OACD;MACD,IAAI,CAACb,yBAAyB,CAACgB,cAAc,CAACa,OAAO,CAAC;;EAE1D;;AA5EW/B,mBAAmB;mBAAnBA,mBAAmB;AAAA;AAAnBA,mBAAmB;QAAnBA,mBAAmB;EAAAgC;EAAAC;IAAA;;eAAnBC,+BAA2B;MAAA;QAAA,OAA3BA,0BAAsB;MAAA;;;;;;;;MClBnCC,8BAA0B;MACxBA,oCAAuC;MAEzCA,iBAAM","names":["select","take","KeypadNumber","KeypadOperator","calculatorEquationSelector","CalculatorComponent","constructor","calculatorEquationService","calculatorApi","store","ngOnInit","equation$","pipe","ngOnDestroy","subscription","unsubscribe","onEnterKeydownEvent","updateEquationPayload","value","Equals","isOperator","equationBeforeUpdate","subscribe","updateEquation","equationAfterUpdate","createCalculationPayload","equation","result","createCalculation","onKeydownEvent","event","key","Object","values","includes","isNumber","payload","selectors","hostBindings","ctx","i0"],"sourceRoot":"","sources":["C:\\Users\\ivaylo.brezoev\\Desktop\\calculator\\src\\app\\calculator\\calculator.component.ts","C:\\Users\\ivaylo.brezoev\\Desktop\\calculator\\src\\app\\calculator\\calculator.component.html"],"sourcesContent":["import { Component, HostListener, OnDestroy, OnInit } from '@angular/core';\nimport { Store, select } from '@ngrx/store';\nimport { map, take } from 'rxjs/operators';\nimport { Observable, Subscription } from 'rxjs';\n\nimport { KeypadNumber, KeypadOperator } from './components/keypad/keypad.enum';\nimport { CalculatorEquationService } from './services/calculatorEquation.service';\nimport { UpdateEquationPayload } from './state/calculator.actions';\nimport { CalculatorApi } from './services/calculator-api.service';\nimport { calculatorEquationSelector } from './state/calculator.selectors';\nimport { AppState } from '../types/appState.interface';\nimport { CalculationPayload } from '../types/calculation.interface';\n\n@Component({\n  selector: 'app-calculator',\n  templateUrl: './calculator.component.html',\n  styleUrls: ['./calculator.component.scss'],\n})\nexport class CalculatorComponent implements OnInit, OnDestroy {\n  equation$: Observable<string>;\n  subscription: Subscription;\n\n  constructor(\n    private calculatorEquationService: CalculatorEquationService,\n    private calculatorApi: CalculatorApi,\n    private store: Store<AppState>\n  ) {}\n\n  ngOnInit(): void {\n    this.equation$ = this.store.pipe(select(calculatorEquationSelector));\n  }\n\n  ngOnDestroy(): void {\n    if (this.subscription) {\n      this.subscription.unsubscribe();\n    }\n  }\n\n  @HostListener('window:keydown.enter', ['$event'])\n  onEnterKeydownEvent() {\n    const updateEquationPayload: UpdateEquationPayload = {\n      value: KeypadOperator.Equals,\n      isOperator: true,\n    };\n\n    // TODO: It's wrong doing it this way. Use Effects.\n    let equationBeforeUpdate: string;\n    this.equation$\n      .pipe(\n        take(1) // take only one emitted value and then complete the observable.\n      )\n      .subscribe((value) => {\n        equationBeforeUpdate = value;\n      });\n\n    // Update the equation and get the value of `this.equation$` after it is updated\n    this.calculatorEquationService.updateEquation(updateEquationPayload);\n    let equationAfterUpdate: string;\n    this.equation$\n      .pipe(\n        take(1) // take only one emitted value and then complete the observable.\n      )\n      .subscribe((value) => {\n        equationAfterUpdate = value;\n\n        // Create the calculation payload with the `equationBeforeUpdate` and `equationAfterUpdate` values.\n        const createCalculationPayload: CalculationPayload = {\n          equation: equationBeforeUpdate,\n          result: equationAfterUpdate,\n        };\n\n        // Call the API to create the calculation\n        this.calculatorApi\n          .createCalculation(createCalculationPayload)\n          .subscribe();\n      });\n  }\n\n  @HostListener('window:keydown', ['$event'])\n  onKeydownEvent(event: KeyboardEvent) {\n    const value = event.key;\n    const isOperator = Object.values(KeypadOperator).includes(\n      value as unknown as KeypadOperator\n    );\n    const isNumber = Object.values(KeypadNumber).includes(\n      value as unknown as KeypadNumber\n    );\n    if (isOperator || isNumber) {\n      const payload: UpdateEquationPayload = {\n        value,\n        isOperator,\n      };\n      this.calculatorEquationService.updateEquation(payload);\n    }\n  }\n}\n","<div ngClass=\"calculator\">\n  <app-display-panel></app-display-panel>\n  <app-keypad></app-keypad>\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}