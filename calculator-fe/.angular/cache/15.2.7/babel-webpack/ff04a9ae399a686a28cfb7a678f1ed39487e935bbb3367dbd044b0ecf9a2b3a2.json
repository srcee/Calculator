{"ast":null,"code":"import { CalculatorStateAction } from './calculator.actions';\nconst initialState = '0';\nexport const calculatorEquationReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CalculatorStateAction.UpdateEquation:\n      {\n        const {\n          value,\n          isOperator\n        } = action.payload;\n        const isDoubleOperator = isOperator && isLastValueOperator(state);\n        const updatedState = isDoubleOperator ? trimLastValue(state) : state;\n        if (state === initialState) {\n          return value;\n        }\n        return updatedState + value;\n      }\n    case CalculatorStateAction.ClearEquation:\n      {\n        return initialState;\n      }\n    case CalculatorStateAction.Backspace:\n      {\n        const updatedState = trimLastValue(state);\n        if (!updatedState) {\n          return initialState;\n        }\n        return updatedState;\n      }\n    case CalculatorStateAction.DecimalPoint:\n      {\n        if (isValidDecimalPoint(state)) {\n          return state + action.payload.value;\n        }\n        return state;\n      }\n    case CalculatorStateAction.Equals:\n      {\n        const equation = isLastValueOperator(state) ? trimLastValue(state) : state;\n        return String(eval(equation || initialState));\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nconst trimLastValue = state => {\n  return state.substring(0, state.length - 1);\n};\nconst isLastValueOperator = state => {\n  return isNaN(Number(state.slice(-1)));\n};\nconst isValidDecimalPoint = state => {\n  const lastDecimalPointIndex = state.lastIndexOf('.');\n  const hasEndingOperator = isLastValueOperator(state);\n  // Check if every value after the last decimal point is a Number, which would lead to double decimal point e.g. (11.1)-not valid (11.1+1)-valid\n  const isDoubleDecimalPoint = lastDecimalPointIndex !== -1 && state.split('').splice(lastDecimalPointIndex + 1).every(Number);\n  const isValidDecimalPoint = !hasEndingOperator || !isDoubleDecimalPoint;\n  return isValidDecimalPoint;\n};","map":{"version":3,"mappings":"AAAA,SAEEA,qBAAqB,QAChB,sBAAsB;AAE7B,MAAMC,YAAY,GAAG,GAAG;AAExB,OAAO,MAAMC,yBAAyB,GAAG,CACvCC,KAAK,GAAGF,YAAY,EACpBG,MAAmC,KACjC;EACF,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKL,qBAAqB,CAACM,cAAc;MAAE;QACzC,MAAM;UAAEC,KAAK;UAAEC;QAAU,CAAE,GAAGJ,MAAM,CAACK,OAAO;QAC5C,MAAMC,gBAAgB,GAAGF,UAAU,IAAIG,mBAAmB,CAACR,KAAK,CAAC;QACjE,MAAMS,YAAY,GAAGF,gBAAgB,GAAGG,aAAa,CAACV,KAAK,CAAC,GAAGA,KAAK;QACpE,IAAIA,KAAK,KAAKF,YAAY,EAAE;UAC1B,OAAOM,KAAK;;QAGd,OAAOK,YAAY,GAAGL,KAAK;;IAG7B,KAAKP,qBAAqB,CAACc,aAAa;MAAE;QACxC,OAAOb,YAAY;;IAGrB,KAAKD,qBAAqB,CAACe,SAAS;MAAE;QACpC,MAAMH,YAAY,GAAGC,aAAa,CAACV,KAAK,CAAC;QACzC,IAAI,CAACS,YAAY,EAAE;UACjB,OAAOX,YAAY;;QAGrB,OAAOW,YAAY;;IAGrB,KAAKZ,qBAAqB,CAACgB,YAAY;MAAE;QACvC,IAAIC,mBAAmB,CAACd,KAAK,CAAC,EAAE;UAC9B,OAAOA,KAAK,GAAGC,MAAM,CAACK,OAAO,CAACF,KAAK;;QAGrC,OAAOJ,KAAK;;IAGd,KAAKH,qBAAqB,CAACkB,MAAM;MAAE;QACjC,MAAMC,QAAQ,GAAGR,mBAAmB,CAACR,KAAK,CAAC,GACvCU,aAAa,CAACV,KAAK,CAAC,GACpBA,KAAK;QAET,OAAOiB,MAAM,CAACC,IAAI,CAACF,QAAQ,IAAIlB,YAAY,CAAC,CAAC;;IAG/C;MAAS;QACP,OAAOE,KAAK;;EACb;AAEL,CAAC;AAED,MAAMU,aAAa,GAAIV,KAAa,IAAY;EAC9C,OAAOA,KAAK,CAACmB,SAAS,CAAC,CAAC,EAAEnB,KAAK,CAACoB,MAAM,GAAG,CAAC,CAAC;AAC7C,CAAC;AACD,MAAMZ,mBAAmB,GAAIR,KAAa,IAAa;EACrD,OAAOqB,KAAK,CAACC,MAAM,CAACtB,KAAK,CAACuB,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AACvC,CAAC;AACD,MAAMT,mBAAmB,GAAId,KAAa,IAAa;EACrD,MAAMwB,qBAAqB,GAAGxB,KAAK,CAACyB,WAAW,CAAC,GAAG,CAAC;EACpD,MAAMC,iBAAiB,GAAGlB,mBAAmB,CAACR,KAAK,CAAC;EACpD;EACA,MAAM2B,oBAAoB,GACxBH,qBAAqB,KAAK,CAAC,CAAC,IAC5BxB,KAAK,CACF4B,KAAK,CAAC,EAAE,CAAC,CACTC,MAAM,CAACL,qBAAqB,GAAG,CAAC,CAAC,CACjCM,KAAK,CAACR,MAAM,CAAC;EAElB,MAAMR,mBAAmB,GAAG,CAACY,iBAAiB,IAAI,CAACC,oBAAoB;EAEvE,OAAOb,mBAAmB;AAC5B,CAAC","names":["CalculatorStateAction","initialState","calculatorEquationReducer","state","action","type","UpdateEquation","value","isOperator","payload","isDoubleOperator","isLastValueOperator","updatedState","trimLastValue","ClearEquation","Backspace","DecimalPoint","isValidDecimalPoint","Equals","equation","String","eval","substring","length","isNaN","Number","slice","lastDecimalPointIndex","lastIndexOf","hasEndingOperator","isDoubleDecimalPoint","split","splice","every"],"sourceRoot":"","sources":["C:\\Users\\ivaylo.brezoev\\Desktop\\calculator\\src\\app\\calculator\\state\\calculator.reducer.ts"],"sourcesContent":["import {\r\n  CalculatorStateActionsUnion,\r\n  CalculatorStateAction,\r\n} from './calculator.actions';\r\n\r\nconst initialState = '0';\r\n\r\nexport const calculatorEquationReducer = (\r\n  state = initialState,\r\n  action: CalculatorStateActionsUnion\r\n) => {\r\n  switch (action.type) {\r\n    case CalculatorStateAction.UpdateEquation: {\r\n      const { value, isOperator } = action.payload;\r\n      const isDoubleOperator = isOperator && isLastValueOperator(state);\r\n      const updatedState = isDoubleOperator ? trimLastValue(state) : state;\r\n      if (state === initialState) {\r\n        return value;\r\n      }\r\n\r\n      return updatedState + value;\r\n    }\r\n\r\n    case CalculatorStateAction.ClearEquation: {\r\n      return initialState;\r\n    }\r\n\r\n    case CalculatorStateAction.Backspace: {\r\n      const updatedState = trimLastValue(state);\r\n      if (!updatedState) {\r\n        return initialState;\r\n      }\r\n\r\n      return updatedState;\r\n    }\r\n\r\n    case CalculatorStateAction.DecimalPoint: {\r\n      if (isValidDecimalPoint(state)) {\r\n        return state + action.payload.value;\r\n      }\r\n\r\n      return state;\r\n    }\r\n\r\n    case CalculatorStateAction.Equals: {\r\n      const equation = isLastValueOperator(state)\r\n        ? trimLastValue(state)\r\n        : state;\r\n\r\n      return String(eval(equation || initialState));\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nconst trimLastValue = (state: string): string => {\r\n  return state.substring(0, state.length - 1);\r\n};\r\nconst isLastValueOperator = (state: string): boolean => {\r\n  return isNaN(Number(state.slice(-1)));\r\n};\r\nconst isValidDecimalPoint = (state: string): boolean => {\r\n  const lastDecimalPointIndex = state.lastIndexOf('.');\r\n  const hasEndingOperator = isLastValueOperator(state);\r\n  // Check if every value after the last decimal point is a Number, which would lead to double decimal point e.g. (11.1)-not valid (11.1+1)-valid\r\n  const isDoubleDecimalPoint =\r\n    lastDecimalPointIndex !== -1 &&\r\n    state\r\n      .split('')\r\n      .splice(lastDecimalPointIndex + 1)\r\n      .every(Number);\r\n\r\n  const isValidDecimalPoint = !hasEndingOperator || !isDoubleDecimalPoint;\r\n\r\n  return isValidDecimalPoint;\r\n};\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}