{"ast":null,"code":"import { CalculatorStateAction } from './calculator.actions';\nconst initialState = '0';\nexport const calculatorEquationReducer = (state = initialState, action) => {\n  switch (action.type) {\n    case CalculatorStateAction.UpdateEquation:\n      {\n        const {\n          value,\n          isOperator\n        } = action.payload;\n        const lastValue = state.slice(-1);\n        const isDoubleOperator = isOperator && getIsOperator(lastValue);\n        const updatedState = isDoubleOperator ? trimLast(state) : state;\n        if (state === initialState) {\n          return value;\n        }\n        return updatedState + value;\n      }\n    case CalculatorStateAction.ClearEquation:\n      {\n        return initialState;\n      }\n    case CalculatorStateAction.Backspace:\n      {\n        const updatedState = trimLast(state);\n        if (!updatedState) {\n          return initialState;\n        }\n        return updatedState;\n      }\n    case CalculatorStateAction.DecimalPoint:\n      {\n        if (!state.includes('.')) {\n          return state + action.payload.value;\n        }\n        return state;\n      }\n    case CalculatorStateAction.Equals:\n      {\n        const equation = getIsOperator(state.slice(-1)) ? trimLast(state) : state;\n        return String(eval(equation));\n      }\n    default:\n      {\n        return state;\n      }\n  }\n};\nconst getIsOperator = val => isNaN(Number(val));\nconst trimLast = val => val.substring(0, val.length - 1);","map":{"version":3,"mappings":"AAAA,SAEEA,qBAAqB,QAChB,sBAAsB;AAE7B,MAAMC,YAAY,GAAG,GAAG;AAExB,OAAO,MAAMC,yBAAyB,GAAG,CACvCC,KAAK,GAAGF,YAAY,EACpBG,MAAmC,KACjC;EACF,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAKL,qBAAqB,CAACM,cAAc;MAAE;QACzC,MAAM;UAAEC,KAAK;UAAEC;QAAU,CAAE,GAAGJ,MAAM,CAACK,OAAO;QAC5C,MAAMC,SAAS,GAAGP,KAAK,CAACQ,KAAK,CAAC,CAAC,CAAC,CAAC;QACjC,MAAMC,gBAAgB,GAAGJ,UAAU,IAAIK,aAAa,CAACH,SAAS,CAAC;QAC/D,MAAMI,YAAY,GAAGF,gBAAgB,GAAGG,QAAQ,CAACZ,KAAK,CAAC,GAAGA,KAAK;QAC/D,IAAIA,KAAK,KAAKF,YAAY,EAAE;UAC1B,OAAOM,KAAK;;QAGd,OAAOO,YAAY,GAAGP,KAAK;;IAG7B,KAAKP,qBAAqB,CAACgB,aAAa;MAAE;QACxC,OAAOf,YAAY;;IAGrB,KAAKD,qBAAqB,CAACiB,SAAS;MAAE;QACpC,MAAMH,YAAY,GAAGC,QAAQ,CAACZ,KAAK,CAAC;QACpC,IAAI,CAACW,YAAY,EAAE;UACjB,OAAOb,YAAY;;QAGrB,OAAOa,YAAY;;IAGrB,KAAKd,qBAAqB,CAACkB,YAAY;MAAE;QACvC,IAAI,CAACf,KAAK,CAACgB,QAAQ,CAAC,GAAG,CAAC,EAAE;UACxB,OAAOhB,KAAK,GAAGC,MAAM,CAACK,OAAO,CAACF,KAAK;;QAGrC,OAAOJ,KAAK;;IAGd,KAAKH,qBAAqB,CAACoB,MAAM;MAAE;QACjC,MAAMC,QAAQ,GAAWR,aAAa,CAACV,KAAK,CAACQ,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,GACnDI,QAAQ,CAACZ,KAAK,CAAC,GACfA,KAAK;QAET,OAAOmB,MAAM,CAACC,IAAI,CAACF,QAAQ,CAAC,CAAC;;IAG/B;MAAS;QACP,OAAOlB,KAAK;;EACb;AAEL,CAAC;AAED,MAAMU,aAAa,GAAIW,GAAW,IAAcC,KAAK,CAACC,MAAM,CAACF,GAAG,CAAC,CAAC;AAClE,MAAMT,QAAQ,GAAIS,GAAW,IAAaA,GAAG,CAACG,SAAS,CAAC,CAAC,EAAEH,GAAG,CAACI,MAAM,GAAG,CAAC,CAAC","names":["CalculatorStateAction","initialState","calculatorEquationReducer","state","action","type","UpdateEquation","value","isOperator","payload","lastValue","slice","isDoubleOperator","getIsOperator","updatedState","trimLast","ClearEquation","Backspace","DecimalPoint","includes","Equals","equation","String","eval","val","isNaN","Number","substring","length"],"sourceRoot":"","sources":["C:\\Users\\ivaylo.brezoev\\Desktop\\calculator\\src\\app\\calculator\\state\\calculator.reducer.ts"],"sourcesContent":["import {\r\n  CalculatorStateActionsUnion,\r\n  CalculatorStateAction,\r\n} from './calculator.actions';\r\n\r\nconst initialState = '0';\r\n\r\nexport const calculatorEquationReducer = (\r\n  state = initialState,\r\n  action: CalculatorStateActionsUnion\r\n) => {\r\n  switch (action.type) {\r\n    case CalculatorStateAction.UpdateEquation: {\r\n      const { value, isOperator } = action.payload;\r\n      const lastValue = state.slice(-1);\r\n      const isDoubleOperator = isOperator && getIsOperator(lastValue);\r\n      const updatedState = isDoubleOperator ? trimLast(state) : state;\r\n      if (state === initialState) {\r\n        return value;\r\n      }\r\n\r\n      return updatedState + value;\r\n    }\r\n\r\n    case CalculatorStateAction.ClearEquation: {\r\n      return initialState;\r\n    }\r\n\r\n    case CalculatorStateAction.Backspace: {\r\n      const updatedState = trimLast(state);\r\n      if (!updatedState) {\r\n        return initialState;\r\n      }\r\n\r\n      return updatedState;\r\n    }\r\n\r\n    case CalculatorStateAction.DecimalPoint: {\r\n      if (!state.includes('.')) {\r\n        return state + action.payload.value;\r\n      }\r\n\r\n      return state;\r\n    }\r\n\r\n    case CalculatorStateAction.Equals: {\r\n      const equation: string = getIsOperator(state.slice(-1))\r\n        ? trimLast(state)\r\n        : state;\r\n\r\n      return String(eval(equation));\r\n    }\r\n\r\n    default: {\r\n      return state;\r\n    }\r\n  }\r\n};\r\n\r\nconst getIsOperator = (val: string): boolean => isNaN(Number(val));\r\nconst trimLast = (val: string): string => val.substring(0, val.length - 1);\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}